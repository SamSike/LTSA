// First, declare constants
	const N_Nurses = 3
	const N_Patients = N_Nurses + 1
	const N_Orderlies = 8
	const N_Transfer_Orderlies = 3
	range Nurse_Range = 0..N_Nurses-1
	range Patient_Range = 0..N_Patients

// ----- Process of Patient Entry and Departure from Hospital -----
	// Producer gets new patient. 
		PRODUCER = (
			get_new_patient -> PRODUCER
		).

	// Consumer discharges patient that has been treated/confirmed non-severe
		CONSUMER = (
			discharge_patient -> CONSUMER
		).

	// Maximum Number of Patients is Number of Nurses + 1.
		PATIENT_COUNT = PATIENT_COUNT[0],
		PATIENT_COUNT[i:Patient_Range] = (
			when (i < N_Patients) get_new_patient -> PATIENT_COUNT[i+1] | 
			when (i > 0) discharge_patient -> PATIENT_COUNT[i-1]
		).

	||PATIENTS_ENTRY_DEPARTURE = (PRODUCER || CONSUMER || PATIENT_COUNT).

// ----- Rooms In Hospital and their processes -----
	// Patient arrives at ED or is discharged from ED.
		FOYER_ARRIVAL = (arrive_at_ED -> assign_patient -> discharge_new_patient_foyer -> FOYER_ARRIVAL).
		FOYER_DEPARTURE = (admit_patient_foyer -> depart_from_ED -> FOYER_DEPARTURE).
		||FOYER = (FOYER_ARRIVAL || FOYER_DEPARTURE).

	// Patient is checked up at Triage
		TRIAGE = (admit_patient_triage -> check_up -> discharge_patient_triage -> TRIAGE).

	// Patient is treated at Treatment
		TREATMENT = (admit_patient_treatment -> treat -> discharge_patient_treatment -> TREATMENT).

	||HOSPITAL_ROOMS = (
		(FOYER/{get_new_patient/arrive_at_ED, discharge_patient/depart_from_ED}) 
		|| TRIAGE || TREATMENT
	).

// ----- Hospital Staff and their duties -----
	// All possible nurse duties
		NURSE = ASSIGN_PATIENT,
		ASSIGN_PATIENT = (assign_patient -> MOVE_FOYER_TO_TRIAGE),
		MOVE_FOYER_TO_TRIAGE = (recruit_orderlies -> discharge_new_patient_foyer -> admit_patient_triage -> release_orderlies -> CHECK_UP),
		CHECK_UP = (check_up -> MOVE_TRIAGE_TO_FOYER | check_up -> MOVE_TRIAGE_TO_TREATMENT),
		MOVE_TRIAGE_TO_TREATMENT = (recruit_orderlies -> discharge_patient_triage -> admit_patient_treatment -> release_orderlies -> TREAT),
		TREAT = (treat -> MOVE_TREATMENT_TO_FOYER),
		MOVE_TREATMENT_TO_FOYER = (recruit_orderlies -> discharge_patient_treatment -> admit_patient_foyer -> release_orderlies -> NURSE),
		MOVE_TRIAGE_TO_FOYER = (recruit_orderlies -> discharge_patient_triage -> admit_patient_foyer -> release_orderlies -> NURSE).

	// Limited number of Orderlies can be recruited and released as required
		ORDERLIES = ORDERLIES[0],
		ORDERLIES[i:0..N_Orderlies] = (
			when (i + N_Transfer_Orderlies < N_Orderlies) recruit_orderlies -> ORDERLIES[i + N_Transfer_Orderlies] |
			when (i >= N_Transfer_Orderlies) release_orderlies -> ORDERLIES[i - N_Transfer_Orderlies]
		).

	// Specialist treats a patient while in treatment room
		SPECIALIST = (enter_treatment -> treat -> exit_treatment -> SPECIALIST).

	||PATIENTS_IN_ROOMS = ({nurse[n:Nurse_Range]}::PATIENTS_ENTRY_DEPARTURE || {nurse[n:Nurse_Range]}::HOSPITAL_ROOMS)\
						{nurse[1..N_Nurses-1].get_new_patient, nurse[1..N_Nurses-1].discharge_patient}.

	||HOSPITAL = (PATIENTS_IN_ROOMS/{get_new_patient/nurse[0].get_new_patient, discharge_patient/nurse[0].discharge_patient}
			|| {nurse[n:Nurse_Range]}::ORDERLIES
			|| forall [n:Nurse_Range] ({nurse[n]}::SPECIALIST)/{enter_treatment/nurse[n].enter_treatment, exit_treatment/nurse[n].exit_treatment}
			|| {nurse[n:Nurse_Range]}:NURSE
			|| {nurse[n:Nurse_Range]}::PATIENT_ROUTE
	).

// ----- Safety Checks -----
	property PATIENT_ROUTE = (get_new_patient -> discharge_patient -> PATIENT_ROUTE).

// ----- Liveness Checks -----
	// Atleast one patient must be severe, and get treated by specialist.
	progress SEVERE = {treat}

	// Patients should be admitted to ED and eventually discharged.
	progress NURSE_ROUNDS = {discharge_patient}
